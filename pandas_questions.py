# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JQ7RRLL7sABIUY0xeECBMf_2uqGTnWJO
"""


"""Plotting referendum results in pandas.
In short, we want to make beautiful map to report results of a referendum. In
some way, we would like to depict results with something similar to the maps
that you can find here:
https://github.com/x-datascience-datacamp/datacamp-assignment-pandas/blob/main/example_map.png
To do that, you will load the data as pandas.DataFrame, merge the info and
aggregate them by regions and finally plot them on a map using `geopandas`.
"""
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt


def load_data():
    """Load data from the CSV files referundum/regions/departments."""
    referendum = pd.read_csv('data/referendum.csv', sep=';')
    regions = pd.read_csv("data/regions.csv")
    departments = pd.read_csv("data/departments.csv")

    return referendum, regions, departments


def merge_regions_and_departments(regions, departments):
    """Merge regions and departments in one DataFrame.
    The columns in the final DataFrame should be:
    ['code_reg', 'name_reg', 'code_dep', 'name_dep']
    """
    regions_and_departments = regions.merge(departments, how='inner', left_on='code', right_on='region_code', suffixes=('_reg', '_dep'))[['code_reg', 'name_reg', 'code_dep', 'name_dep']]
    return regions_and_departments


def merge_referendum_and_areas(referendum, regions_and_departments):
    """Merge referendum and regions_and_departments in one DataFrame.
    You can drop the lines relative to DOM-TOM-COM departments, and the
    french living abroad.
    """
    A = referendum[referendum['Department code'].str.len() == 1]['Department code'].apply(lambda x: x.zfill(2)).values
    referendum.loc[referendum['Department code'].str.len() == 1, 'Department code'] = A
    regions_and_departments.loc[:, 'name_dep'] = regions_and_departments['name_dep'].apply(lambda x: x.upper())
    referendum.loc[:, 'Department name'] = referendum['Department name'].apply(lambda x: x.upper())
    referendum_and_areas = regions_and_departments.merge(referendum, how='inner', left_on='code_dep', right_on='Department code').sort_values(by='code_dep')
    referendum_and_areas.drop(referendum_and_areas[referendum_and_areas.code_reg == 'COM'].index, inplace=True)
    referendum_and_areas.drop(referendum_and_areas[referendum_and_areas.name_dep == "FRANCAIS DE L'ETRANGER"].index, inplace=True)
    return referendum_and_areas


def compute_referendum_result_by_regions(referendum_and_areas):
    """Return a table with the absolute count for each region.
    The return DataFrame should be indexed by `code_reg` and have columns:
    ['name_reg', 'Registered', 'Abstentions', 'Null', 'Choice A', 'Choice B']
    """
    referendum_result_by_regions = referendum_and_areas.groupby(['code_reg', 'name_reg']).sum().reset_index().set_index('code_reg')[['name_reg', 'Registered', 'Abstentions', 'Null', 'Choice A', 'Choice B']]
    return referendum_result_by_regions


def plot_referendum_map(referendum_result_by_regions):
    """Plot a map with the results from the referendum.
    * Load the geographic data with geopandas from `regions.geojson`.
    * Merge these info into `referendum_result_by_regions`.
    * Use the method `GeoDataFrame.plot` to display the result map. The results
      should display the rate of 'Choice A' over all expressed ballots.
    * Return a gpd.GeoDataFrame with a column 'ratio' containing the results.
    """
    df = gpd.read_file('data/regions.geojson')
    res = df.merge(referendum_result_by_regions, how='inner', left_on=['code', 'nom'], right_on=['code_reg', 'name_reg'])
    res.drop(['code', 'nom'], axis=1, inplace=True)
    res['ratio'] = res['Choice A'] / (res['Choice A'] + res['Choice B'])
    res.plot("ratio", figsize=(15, 10), legend=True, legend_kwds={"label": "Ratio of choice A over all expressed ballots", "orientation": "horizontal"})
    plt.title("Map of the ratio of choice A")
    plt.show()
    return res


if __name__ == "__main__":

    referendum, df_reg, df_dep = load_data()
    regions_and_departments = merge_regions_and_departments(
        df_reg, df_dep
    )
    referendum_and_areas = merge_referendum_and_areas(
        referendum, regions_and_departments
    )
    referendum_results = compute_referendum_result_by_regions(
        referendum_and_areas
    )
    print(referendum_results)  
    plot_referendum_map(referendum_results)